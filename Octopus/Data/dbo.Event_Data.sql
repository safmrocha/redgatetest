SET IDENTITY_INSERT [dbo].[Event] ON
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-1', N'|Users-1| ', NULL, NULL, N'Created', N'Users-1', N'Administrator', '2017-08-16 14:32:43.4145040 +00:00', N'User Administrator was created using the admin command line', N'{"MessageReferences":[{"ReferencedDocumentId":"Users-1","StartIndex":5,"Length":13}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Command-line or tools"}', NULL, 1)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-2', N'|Users-1| ', NULL, NULL, N'Modified', N'Users-1', N'Administrator', '2017-08-16 14:32:43.4909157 +00:00', N'User Administrator set password using the admin command line', N'{"MessageReferences":[{"ReferencedDocumentId":"Users-1","StartIndex":5,"Length":13}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Command-line or tools"}', NULL, 2)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-21', N'|Environments-1| ', NULL, N'Environments-1', N'Created', N'Users-1', N'Administrator', '2017-08-16 14:42:33.5933438 +00:00', N'Environment Test was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Environments-1","StartIndex":12,"Length":4}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Environments-1\",\r&para;<br>  \"Name\": \"Test\",\r&para;<br>  \"Description\": \"\",\r&para;<br>  \"SortOrder\": 0,\r&para;<br>  \"UseGuidedFailure\": false\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 4)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-22', N'|Machines-1|Environments-1| ', NULL, N'Environments-1', N'Created', N'Users-1', N'Administrator', '2017-08-16 14:46:39.0275830 +00:00', N'Machine W2k16-1 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Machines-1","StartIndex":8,"Length":7}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Machines-1\",\r&para;<br>  \"Name\": \"W2k16-1\",\r&para;<br>  \"Endpoint\": {\r&para;<br>    \"$type\": \"Octopus.Core.Model.Environments.Endpoints.ListeningTentacleEndpoint, Octopus.Core\",\r&para;<br>    \"ProxyId\": null,\r&para;<br>    \"Thumbprint\": \"8D2B06A4327670BE71F3C8C2B92A0EDF1B69445F\",\r&para;<br>    \"Uri\": \"https://W2k16-1:10933\",\r&para;<br>    \"UpgradeLocked\": false\r&para;<br>  },\r&para;<br>  \"IsDisabled\": false,\r&para;<br>  \"Roles\": [\r&para;<br>    \"Test\"\r&para;<br>  ],\r&para;<br>  \"EnvironmentIds\": [\r&para;<br>    \"Environments-1\"\r&para;<br>  ],\r&para;<br>  \"TenantedDeploymentParticipation\": \"Untenanted\",\r&para;<br>  \"TenantIds\": [],\r&para;<br>  \"TenantTags\": [],\r&para;<br>  \"MachinePolicyId\": \"MachinePolicies-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 5)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-23', N'|Machines-1|Environments-1| ', NULL, N'Environments-1', N'MachineAdded', N'Users-1', N'Administrator', '2017-08-16 14:46:39.0682765 +00:00', N'Machine W2k16-1 was created (domain-event)', N'{"MessageReferences":[{"ReferencedDocumentId":"Machines-1","StartIndex":8,"Length":7}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 6)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-3', N'|Users-1|teams-administrators| ', NULL, NULL, N'Modified', N'Users-1', N'Administrator', '2017-08-16 14:32:43.5035198 +00:00', N'User Administrator was added to Octopus Administrators using the admin command line', N'{"MessageReferences":[{"ReferencedDocumentId":"Users-1","StartIndex":5,"Length":13},{"ReferencedDocumentId":"teams-administrators","StartIndex":32,"Length":22}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Command-line or tools"}', NULL, 3)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-41', N'|ActionTemplates-1| ', NULL, NULL, N'Created', N'Users-1', N'Administrator', '2018-08-01 15:09:41.6310748 +00:00', N'ActionTemplate Redgate - Create Database Release was created', N'{"MessageReferences":[{"ReferencedDocumentId":"ActionTemplates-1","StartIndex":15,"Length":33}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"ActionTemplates-1\",\r&para;<br>  \"Name\": \"Redgate - Create Database Release\",\r&para;<br>  \"Description\": \"Creates the resources (including the SQL update script) to deploy database changes using Redgate''s [SQL Change Automation](http://www.red-gate.com/sca/productpage), and exports them as Octopus artifacts so you can review the changes before deploying.\\r\\n\\r\\nRequires SQL Change Automation version 3.0.2 or later.\\r\\n\\r\\n*Version date: 3rd July, 2018*\",\r&para;<br>  \"Version\": 13,\r&para;<br>  \"ActionType\": \"Octopus.Script\",\r&para;<br>  \"CommunityActionTemplateId\": \"CommunityActionTemplates-160\",\r&para;<br>  \"Properties\": {\r&para;<br>    \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\"\r&para;<br>  },\r&para;<br>  \"Parameters\": [\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDeploymentResourcesPath\",\r&para;<br>      \"Label\": \"Export path\",\r&para;<br>      \"HelpText\": \"The path that the database deployment resources will be exported to.\\n\\nThis path is used in the \\\"Redgate - Deploy from Database Release\\\" step, and must be accessible to all tentacles used in database deployment steps.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDeleteExistingFiles\",\r&para;<br>      \"Label\": \"Delete files in export folder\",\r&para;<br>      \"HelpText\": \"If the folder that the deployment resources are exported to isn''t empty, this step will fail. Select this option to delete any files in the folder.\",\r&para;<br>      \"DefaultValue\": \"True\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Checkbox\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationNuGetDbPackageDownloadStepName\",\r&para;<br>      \"Label\": \"Database package step\",\r&para;<br>      \"HelpText\": \"Select the step in this project which downloads the database package.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"StepName\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseServer\",\r&para;<br>      \"Label\": \"Target SQL Server instance\",\r&para;<br>      \"HelpText\": \"The fully qualified SQL Server instance name for the target database.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseName\",\r&para;<br>      \"Label\": \"Target database name\",\r&para;<br>      \"HelpText\": \"The name of the database that the source schema (the database package) will be compared with to generate the deployment resources. This must be an existing database.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseUsername\",\r&para;<br>      \"Label\": \"Username (optional)\",\r&para;<br>      \"HelpText\": \"The SQL Server username used to connect to the database. If you leave this field and ''Password'' blank, Windows authentication will be used to connect instead, using the account that runs the Tentacle service.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabasePassword\",\r&para;<br>      \"Label\": \"Password (optional)\",\r&para;<br>      \"HelpText\": \"You must enter a password if you entered a username.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Sensitive\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationFilterPath\",\r&para;<br>      \"Label\": \"Filter path (optional)\",\r&para;<br>      \"HelpText\": \"Specify the location of a SQL Compare filter file (.scpf), which defines objects to include/exclude in the schema comparison. Filter files are generated by SQL Source Control.\\n\\nFor more help see [Using SQL Compare filters in SQL Change Automation](http://www.red-gate.com/sca/ps/help/filters).\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationCompareOptions\",\r&para;<br>      \"Label\": \"SQL Compare options (optional)\",\r&para;<br>      \"HelpText\": \"Enter SQL Compare options to apply when generating the update script. Use a comma-separated list to enter multiple values. For more help see [Using SQL Compare options in SQL Change Automation](http://www.red-gate.com/sca/add-ons/compare-options).\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationTransactionIsolationLevel\",\r&para;<br>      \"Label\": \"Transaction isolation level (optional)\",\r&para;<br>      \"HelpText\": \"Select the transaction isolation level to be used in deployment scripts.\",\r&para;<br>      \"DefaultValue\": \"Serializable\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Select\",\r&para;<br>        \"Octopus.SelectOptions\": \"Serializable\\nSnapshot\\nRepeatableRead\\nReadCommitted\\nReadUncommitted\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationIgnoreStaticData\",\r&para;<br>      \"Label\": \"Ignore static data\",\r&para;<br>      \"HelpText\": \"Exclude changes to static data when generating the deployment resources.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Checkbox\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationIncludeIdenticalsInReport\",\r&para;<br>      \"Label\": \"Include identical objects in the change report\",\r&para;<br>      \"HelpText\": \"By default, the change report only includes added, modified and removed objects. Choose this option to also include identical objects.\",\r&para;<br>      \"DefaultValue\": \"False\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Checkbox\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"SpecificModuleVersion\",\r&para;<br>      \"Label\": \"SQL Change Automation version (optional)\",\r&para;<br>      \"HelpText\": \"If you wish to use a specific version of SQL Change Automation rather than the latest, enter the version number here.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ]\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 8)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-42', N'|ActionTemplates-2| ', NULL, NULL, N'Created', N'Users-1', N'Administrator', '2018-08-01 15:10:05.0922679 +00:00', N'ActionTemplate Redgate - Deploy from Database Release was created', N'{"MessageReferences":[{"ReferencedDocumentId":"ActionTemplates-2","StartIndex":15,"Length":38}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"ActionTemplates-2\",\r&para;<br>  \"Name\": \"Redgate - Deploy from Database Release\",\r&para;<br>  \"Description\": \"Uses the deployment resources from the ''Redgate - Create Database Release'' step to deploy the database changes using Redgate''s [SQL Change Automation](http://www.red-gate.com/sca/productpage).\\r\\n\\r\\nRequires SQL Change Automation version 3.0.2 or later.\\r\\n\\r\\n*Version date: 3rd July, 2018*\",\r&para;<br>  \"Version\": 8,\r&para;<br>  \"ActionType\": \"Octopus.Script\",\r&para;<br>  \"CommunityActionTemplateId\": \"CommunityActionTemplates-162\",\r&para;<br>  \"Properties\": {\r&para;<br>    \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDeploymentResourcesPath)) { throw \\\"You must enter a value for ''Export path''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" } \\n\\n$queryBatchTimeout = 30\\nif (![string]::IsNullOrWhiteSpace($DLMAutomationQueryBatchTimeout)) {\\n    if (![int32]::TryParse($DLMAutomationQueryBatchTimeout , [ref]$queryBatchTimeout )) {\\n        throw ''The query batch timeout must be a numerical value (in seconds).''\\n    }\\n    if ($queryBatchTimeout -lt 0) {\\n        throw \\\"The query batch timeout can''t be negative.\\\"\\n    }\\n}\\n\\n# Check whether database deployment resources export path exists and is a valid directory path \\nif((Test-Path $DLMAutomationDeploymentResourcesPath) -eq $true) {\\n    if((Get-Item $DLMAutomationDeploymentResourcesPath) -isnot [System.IO.DirectoryInfo]) {\\n        throw \\\"The export path is not a valid folder: $DLMAutomationDeploymentResourcesPath\\\"\\n    }\\n} else {\\n    throw \\\"The export path folder doesn''t exist, or the current Windows account can''t access it: $DLMAutomationDeploymentResourcesPath\\\"\\n}\\n\\n# Get the NuGet package ID and validate the step name.\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\nif ($nugetPackageId -eq $null) { \\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[''Octopus.Project.Id'']\\n$releaseNumber = $OctopusParameters[''Octopus.Release.Number'']\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Create and test connection to the database.\\n$databaseConnection = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer `\\n                                                -Database $DLMAutomationDatabaseName `\\n                                                -Username $DLMAutomationDatabaseUsername `\\n                                                -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n\\n$releaseUrl = $OctopusParameters[''Octopus.Web.BaseUrl''] + $OctopusParameters[''Octopus.Web.DeploymentLink'']; \\n# Import and deploy the release.\\nImport-DatabaseReleaseArtifact $exportPath | Use-DatabaseReleaseArtifact -DeployTo $databaseConnection -QueryBatchTimeout $queryBatchTimeout -ReleaseUrl $releaseUrl\\n\"\r&para;<br>  },\r&para;<br>  \"Parameters\": [\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDeploymentResourcesPath\",\r&para;<br>      \"Label\": \"Export path\",\r&para;<br>      \"HelpText\": \"The path the database deployment resources were exported to.\\n\\nThis should be the same path specified in the \\\"Redgate - Create Database Release\\\" step, and must be accessible to all tentacles used in database deployment steps.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationNuGetDbPackageDownloadStepName\",\r&para;<br>      \"Label\": \"Database package step\",\r&para;<br>      \"HelpText\": \"Select the step in this project which downloads the database package.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"StepName\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseServer\",\r&para;<br>      \"Label\": \"Target SQL Server instance\",\r&para;<br>      \"HelpText\": \"The fully qualified SQL Server instance name for the target database.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseName\",\r&para;<br>      \"Label\": \"Target database name\",\r&para;<br>      \"HelpText\": \"The name of the database to deploy changes to. This must be an existing database.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabaseUsername\",\r&para;<br>      \"Label\": \"Username (optional)\",\r&para;<br>      \"HelpText\": \"The SQL Server username used to connect to the database. If you leave this field and ''Password'' blank, Windows authentication will be used to connect instead, using the account that runs the Tentacle service.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationDatabasePassword\",\r&para;<br>      \"Label\": \"Password (optional)\",\r&para;<br>      \"HelpText\": \"You must enter a password if you entered a username.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"Sensitive\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"DLMAutomationQueryBatchTimeout\",\r&para;<br>      \"Label\": \"Query batch timeout (in seconds)\",\r&para;<br>      \"HelpText\": \"The execution timeout, in seconds, for each batch of queries in the update script. The default value is 30 seconds. A value of zero indicates no execution timeout.\",\r&para;<br>      \"DefaultValue\": \"30\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": null,\r&para;<br>      \"Name\": \"SpecificModuleVersion\",\r&para;<br>      \"Label\": \"SQL Change Automation version (optional)\",\r&para;<br>      \"HelpText\": \"If you wish to use a specific version of SQL Change Automation rather than the latest, enter the version number here.\",\r&para;<br>      \"DefaultValue\": \"\",\r&para;<br>      \"DisplaySettings\": {\r&para;<br>        \"Octopus.ControlType\": \"SingleLineText\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ]\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 9)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-43', N'|Projects-1| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-01 15:11:33.6416873 +00:00', N'Project SCA was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":8,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Projects-1\",\r&para;<br>  \"Name\": \"SCA\",\r&para;<br>  \"Description\": </span><del style=\"background:#ffe6e6;\">\"\"</del><ins style=\"background:#e6ffe6;\">null</ins><span>,\r&para;<br>  \"Slug\": \"sca\",\r&para;<br>  \"IsDisabled\": false,\r&para;<br>  \"VariableSetId\": null,\r&para;<br>  \"DeploymentProcessId\": null,\r&para;<br>  \"ProjectGroupId\": \"ProjectGroups-1\",\r&para;<br>  \"LifecycleId\": \"Lifecycles-1\",\r&para;<br>  \"AutoCreateRelease\": false,\r&para;<br>  \"DiscreteChannelRelease\": false,\r&para;<br>  \"IncludedLibraryVariableSetIds\": [],\r&para;<br>  \"UsedPackages\": [],\r&para;<br>  \"DefaultToSkipIfAlreadyInstalled\": false,\r&para;<br>  \"TenantedDeploymentMode\": \"Untenanted\",\r&para;<br>  \"VersioningStrategy\": {\r&para;<br>    \"DonorPackageStepId\": null,\r&para;<br>    \"Template\": \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.NextPatch}\"\r&para;<br>  },\r&para;<br>  \"Templates\": [],\r&para;<br>  \"ReleaseCreationStrategy\": {\r&para;<br>    \"ReleaseCreationPackageStepId\": null,\r&para;<br>    \"ChannelId\": null\r&para;<br>  },\r&para;<br>  \"ProjectConnectivityPolicy\": {\r&para;<br>    \"SkipMachineBehavior\": \"None\",\r&para;<br>    \"TargetRoles\": [],\r&para;<br>    \"AllowDeploymentsToNoTargets\": false\r&para;<br>  },\r&para;<br>  \"AutoDeployReleaseOverrides\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 10)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-44', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-01 15:19:32.6724696 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">0,\r&para;<br>  \"Steps\": [</del><ins style=\"background:#e6ffe6;\">1,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"Octopus\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  </ins><span>],\r&para;<br>  \"RelatedDocumentIds\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 11)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-45', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-01 15:23:39.7994693 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">1</del><ins style=\"background:#e6ffe6;\">2</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br></span><del style=\"background:#ffe6e6;\"></del><span>            \"Octopus.Action.Package.PackageId\": \"Octopus\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br></span><ins style=\"background:#e6ffe6;\">    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"unY7TB3YpMFVWPZgtXZjQxMmcOE=|fv5gL/LIKYgSbYKS\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br>            \"DLMAutomationTransactionIsolationLevel\": \"Serializable\",\r&para;<br>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br></ins><span>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 12)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-46', N'|feeds-builtin| ', NULL, NULL, N'Created', N'Users-1', N'Administrator', '2018-08-02 14:24:48.3167637 +00:00', N'Package 118482 version 1.0.0 was pushed to the builtin feed', N'{"MessageReferences":[{"ReferencedDocumentId":"feeds-builtin","StartIndex":47,"Length":7}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 13)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-47', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-02 14:32:19.4394931 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">2</del><ins style=\"background:#e6ffe6;\">3</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"</span><del style=\"background:#ffe6e6;\">Octopus</del><ins style=\"background:#e6ffe6;\">118482</ins><span>\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"ycYpYAnRSPjdxTTjcz/dWEVv8PE=|2vm0rc4aSzg5kH3N\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br>            \"DLMAutomationTransactionIsolationLevel\": \"Serializable\",\r&para;<br>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 14)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-48', N'|Projects-1|Releases-1| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-02 14:32:26.1288876 +00:00', N'SCA release 0.0.1 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-1","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-1\",\r&para;<br>  \"Version\": \"0.0.1\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-02T14:32:26.1000855+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-3-ZXN7N\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"StepName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 15)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-49', N'|Deployments-1|Projects-1|Releases-1|Environments-1|ServerTasks-202|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-02 14:32:37.3489788 +00:00', N'Deployed SCA release 0.0.1 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-1","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 16)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-50', N'|Deployments-1|Projects-1|Releases-1|Environments-1|ServerTasks-202|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-02 14:32:37.4440344 +00:00', N'Deploy to Test started  for SCA release 0.0.1 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-1","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-1","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 17)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-51', N'|Deployments-1|Projects-1|Releases-1|Environments-1|ServerTasks-202|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentFailed', N'users-system', N'system', '2018-08-02 14:33:18.1373360 +00:00', N'Deploy to Test failed  for SCA release 0.0.1 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-1","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":27,"Length":3},{"ReferencedDocumentId":"Releases-1","StartIndex":39,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":48,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 18)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-52', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-02 14:34:43.0438249 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">3</del><ins style=\"background:#e6ffe6;\">4</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"118482\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"FFwLJiWzPg59DaWzGGOhiBQWWEE=|c5k1a5/1RaszXPFk\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br>            \"DLMAutomationTransactionIsolationLevel\": \"Serializable\",\r&para;<br>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\"</span><ins style=\"background:#e6ffe6;\">,\r&para;<br>            \"DLMAutomationDeploymentResourcesPath\": \"C:\\\\Users\\\\Sergio\\\\Desktop\\\\Export\"</ins><span>\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 19)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-53', N'|Projects-1|Releases-2| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-02 14:34:48.1552997 +00:00', N'SCA release 0.0.2 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-2","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-2\",\r&para;<br>  \"Version\": \"0.0.2\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-02T14:34:48.1304785+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-4-JNTD5\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"StepName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 20)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-54', N'|Deployments-2|Projects-1|Releases-2|Environments-1|ServerTasks-203|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-02 14:34:51.5940927 +00:00', N'Deployed SCA release 0.0.2 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-2","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 21)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-55', N'|Deployments-2|Projects-1|Releases-2|Environments-1|ServerTasks-203|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-02 14:34:51.6182789 +00:00', N'Deploy to Test started  for SCA release 0.0.2 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-2","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-2","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 22)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-56', N'|Deployments-2|Projects-1|Releases-2|Environments-1|ServerTasks-203|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentFailed', N'users-system', N'system', '2018-08-02 14:35:21.5043803 +00:00', N'Deploy to Test failed  for SCA release 0.0.2 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-2","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":27,"Length":3},{"ReferencedDocumentId":"Releases-2","StartIndex":39,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":48,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 23)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-57', N'|Projects-1|Releases-3| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-02 14:35:54.3552922 +00:00', N'SCA release 0.0.3 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-3","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-3\",\r&para;<br>  \"Version\": \"0.0.3\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-02T14:35:54.3424239+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-4-JNTD5\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"StepName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 24)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-58', N'|Deployments-3|Projects-1|Releases-3|Environments-1|ServerTasks-204|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-02 14:36:11.9511759 +00:00', N'Deployed SCA release 0.0.3 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-3","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 25)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-59', N'|Deployments-3|Projects-1|Releases-3|Environments-1|ServerTasks-204|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-02 14:36:11.9832276 +00:00', N'Deploy to Test started  for SCA release 0.0.3 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-3","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-3","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 26)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-60', N'|Deployments-3|Projects-1|Releases-3|Environments-1|ServerTasks-204|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentSucceeded', N'users-system', N'system', '2018-08-02 14:36:36.7288037 +00:00', N'Deploy to Test succeeded  for SCA release 0.0.3 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-3","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":30,"Length":3},{"ReferencedDocumentId":"Releases-3","StartIndex":42,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":51,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 27)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-61', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-02 14:40:10.5344940 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">4</del><ins style=\"background:#e6ffe6;\">5</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"118482\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"RequiresPackagesToBeAcquired\": false,\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"stckQ/8RW8v3kGu54YE9o292Np0=|eaBogKobOIZdBFld\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br>            \"DLMAutomationTransactionIsolationLevel\": \"</span><del style=\"background:#ffe6e6;\">Serializable</del><ins style=\"background:#e6ffe6;\">ReadCommitted</ins><span>\",\r&para;<br>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\",\r&para;<br>            \"DLMAutomationDeploymentResourcesPath\": \"C:\\\\Users\\\\Sergio\\\\Desktop\\\\Export\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": []\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 28)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-62', N'|Projects-1|Releases-4| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-02 14:40:18.1988808 +00:00', N'SCA release 0.0.4 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-4","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-4\",\r&para;<br>  \"Version\": \"0.0.4\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-02T14:40:18.182482+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-5-J6T7W\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"StepName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 29)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-63', N'|Deployments-4|Projects-1|Releases-4|Environments-1|ServerTasks-205|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-02 14:40:23.0958868 +00:00', N'Deployed SCA release 0.0.4 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-4","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 30)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-64', N'|Deployments-4|Projects-1|Releases-4|Environments-1|ServerTasks-205|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-02 14:40:23.1189239 +00:00', N'Deploy to Test started  for SCA release 0.0.4 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-4","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-4","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 31)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-65', N'|Deployments-4|Projects-1|Releases-4|Environments-1|ServerTasks-205|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentSucceeded', N'users-system', N'system', '2018-08-02 14:40:46.6456258 +00:00', N'Deploy to Test succeeded  for SCA release 0.0.4 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-4","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":30,"Length":3},{"ReferencedDocumentId":"Releases-4","StartIndex":42,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":51,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 32)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-66', N'|Machines-1|Environments-1| ', NULL, N'Environments-1', N'MachineHealthy', N'users-system', N'system', '2018-08-02 14:52:38.3453126 +00:00', N'Machine W2k16-1 became healthy', N'{"MessageReferences":[{"ReferencedDocumentId":"Machines-1","StartIndex":8,"Length":7}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 33)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-81', N'|Machines-1|Environments-1| ', NULL, N'Environments-1', N'MachineHasWarnings', N'users-system', N'system', '2018-08-03 12:30:20.5877866 +00:00', N'DeploymentTarget W2k16-1 became healthy but has warnings', N'{"MessageReferences":[{"ReferencedDocumentId":"Machines-1","StartIndex":17,"Length":7}],"Comments":null,"Details":"Warning: Not running latest version of Calamari. Expected: 4.7.32","IdentityEstablishedWith":"Unknown"}', NULL, 34)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-82', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-03 12:31:59.8933769 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">5</del><ins style=\"background:#e6ffe6;\">6</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"PackageRequirement\": \"LetOctopusDecide\",\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"WorkerPoolId\": null,\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"IsRequired\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"118482\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"PackageRequirement\": \"LetOctopusDecide\",\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"WorkerPoolId\": null,\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"IsRequired\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"XoP2MDdfWzMOC7OWIjKTzzE2sh4=|xn+z+s6kh8anYpKP\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br></span><del style=\"background:#ffe6e6;\">            \"DLMAutomationTransactionIsolationLevel\": \"ReadCommitted\",\r&para;<br></del><span>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\",\r&para;<br>            \"DLMAutomationDeploymentResourcesPath\": \"C:\\\\Users\\\\Sergio\\\\Desktop\\\\Export\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": [\r&para;<br>    \"ActionTemplates-1\"\r&para;<br>  ]\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 35)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-83', N'|Projects-1|Releases-21| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-03 12:32:09.7867464 +00:00', N'SCA release 0.0.5 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-21","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-21\",\r&para;<br>  \"Version\": \"0.0.5\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-03T12:32:09.5839328+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-6-Y88CF\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"ActionName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 36)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-84', N'|Deployments-21|Projects-1|Releases-21|Environments-1|ServerTasks-226|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-03 12:32:22.3314040 +00:00', N'Deployed SCA release 0.0.5 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-21","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 37)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-85', N'|Deployments-21|Projects-1|Releases-21|Environments-1|ServerTasks-226|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-03 12:32:22.5783142 +00:00', N'Deploy to Test started  for SCA release 0.0.5 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-21","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-21","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 38)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-86', N'|Deployments-21|Projects-1|Releases-21|Environments-1|ServerTasks-226|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentFailed', N'users-system', N'system', '2018-08-03 12:32:54.6762060 +00:00', N'Deploy to Test failed  for SCA release 0.0.5 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-21","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":27,"Length":3},{"ReferencedDocumentId":"Releases-21","StartIndex":39,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":48,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 39)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-87', N'|deploymentprocess-Projects-1|Projects-1| ', N'Projects-1', NULL, N'Modified', N'Users-1', N'Administrator', '2018-08-03 12:39:01.6863270 +00:00', N'Deployment process for SCA was changed', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":23,"Length":3}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"deploymentprocess-Projects-1\",\r&para;<br>  \"OwnerId\": \"Projects-1\",\r&para;<br>  \"Version\": </span><del style=\"background:#ffe6e6;\">6</del><ins style=\"background:#e6ffe6;\">7</ins><span>,\r&para;<br>  \"Steps\": [\r&para;<br>    {\r&para;<br>      \"Id\": \"dcb780e4-077e-4db6-b162-63be5a1d0aa2\",\r&para;<br>      \"Name\": \"Octopus\",\r&para;<br>      \"Condition\": \"Always\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"PackageRequirement\": \"LetOctopusDecide\",\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"29ba74b4-4a7f-45ea-9221-36c7a7d7d12a\",\r&para;<br>          \"Name\": \"Octopus\",\r&para;<br>          \"ActionType\": \"Octopus.TentaclePackage\",\r&para;<br>          \"WorkerPoolId\": null,\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"IsRequired\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"Octopus.Action.Package.AutomaticallyRunConfigurationTransformationFiles\": \"True\",\r&para;<br>            \"Octopus.Action.Package.AutomaticallyUpdateAppSettingsAndConnectionStrings\": \"True\",\r&para;<br>            \"Octopus.Action.EnabledFeatures\": \"Octopus.Features.ConfigurationTransforms,Octopus.Features.ConfigurationVariables\",\r&para;<br>            \"Octopus.Action.Package.DownloadOnTentacle\": \"False\",\r&para;<br>            \"Octopus.Action.Package.FeedId\": \"feeds-builtin\",\r&para;<br>            \"Octopus.Action.Package.PackageId\": \"118482\"\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    },\r&para;<br>    {\r&para;<br>      \"Id\": \"08ba58b7-9691-43ad-b78a-64b9d9d215b3\",\r&para;<br>      \"Name\": \"Redgate - Create Database Release\",\r&para;<br>      \"Condition\": \"Success\",\r&para;<br>      \"StartTrigger\": \"StartAfterPrevious\",\r&para;<br>      \"PackageRequirement\": \"LetOctopusDecide\",\r&para;<br>      \"Actions\": [\r&para;<br>        {\r&para;<br>          \"Id\": \"27ca9364-15cc-4e71-9770-bd870776434d\",\r&para;<br>          \"Name\": \"Redgate - Create Database Release\",\r&para;<br>          \"ActionType\": \"Octopus.Script\",\r&para;<br>          \"WorkerPoolId\": null,\r&para;<br>          \"IsDisabled\": false,\r&para;<br>          \"IsRequired\": false,\r&para;<br>          \"Environments\": [],\r&para;<br>          \"ExcludedEnvironments\": [],\r&para;<br>          \"Channels\": [],\r&para;<br>          \"TenantTags\": [],\r&para;<br>          \"Properties\": {\r&para;<br>            \"DLMAutomationDatabasePassword\": {\r&para;<br>              \"SensitiveValue\": \"UBDxkxqCttqL79L+dCeB923lx2I=|mna3tGDapqFgZbn/\"\r&para;<br>            },\r&para;<br>            \"Octopus.Action.Script.ScriptBody\": \"$DlmAutomationModuleName = \\\"DLMAutomation\\\"\\n$SqlChangeAutomationModuleName = \\\"SqlChangeAutomation\\\"\\n$LocalModules = (New-Item \\\"$PSScriptRoot\\\\Modules\\\" -ItemType Directory -Force).FullName\\n$env:PSModulePath = \\\"$LocalModules;$env:PSModulePath\\\"\\n\\nfunction IsScaAvailable\\n{\\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\\n        return $true\\n    }\\n\\n    return $false\\n}\\n\\nfunction InstallCorrectSqlChangeAutomation\\n{\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $false)]\\n        [Version]$requiredVersion\\n    )\\n\\n    CheckRequiredDotNetVersionIsInstalled\\n\\n    $moduleName = $SqlChangeAutomationModuleName\\n\\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\\n    $maximumVersion = $requiredVersion\\n\\n    if ($requiredVersion) {\\n        if ($requiredVersion.Revision -eq -1) {\\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\\n            $maximumVersion = [Version]\\\"$requiredVersion.$([System.Int32]::MaxValue)\\\"\\n        }\\n\\n        if ($requiredVersion.Major -lt 3) {\\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\\n            $moduleName = $DlmAutomationModuleName\\n        }\\n    }\\n\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule) {\\n        #Either SCA isn''t installed at all or $requiredVersion is specified but that version of SCA isn''t installed\\n        Write-Verbose \\\"$moduleName $requiredVersion not available - attempting to download from gallery\\\"\\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n    }\\n    elseif (!$requiredVersion) {\\n        #We''ve got a version of SCA installed, but $requiredVersion isn''t specified so we might be able to upgrade\\n        $newest = GetHighestInstallableModule $moduleName\\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\\n            Write-Verbose \\\"Updating $moduleName to version $($newest.Version)\\\"\\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\\n        }\\n    }\\n\\n    # Now we''re done with install/upgrade, try to import the highest available module that matches our version requirements\\n\\n    # We can''t just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn''t have them,\\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\\n    # $requiredVersion and $maximumVersion might be null when there''s no specific version we need.\\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\\n\\n    if (!$installedModule -and !$requiredVersion) {\\n        #Did not find SCA, and we don''t have a required version so we might be able to use an installed DLMA instead.\\n        Write-Verbose \\\"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\\\"\\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \\n    }\\n    \\n    if ($installedModule) {\\n        Write-Verbose \\\"Importing installed $($installedModule.Name) version $($installedModule.Version)\\\"\\n        Import-Module $installedModule -Force\\n    }\\n    else {\\n        throw \\\"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\\\"\\n    }\\n}\\n\\nfunction CheckRequiredDotNetVersionIsInstalled {\\n    Write-Debug \\\"Check .NET version pre-requisite\\\"\\n\\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\\n    $dotNet461Installed = Get-ChildItem \\\"HKLM:SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue(''Release'') -ge 394254} \\n    \\n    if (!$dotNet461Installed) {\\n        throw \\\"SQL Change Automation requires .NET Framework 4.6.1 or later.\\\"\\n    }\\n}\\n\\nfunction InstallPowerShellGet {\\n    [CmdletBinding()]\\n    Param()\\n    $psget = GetHighestInstalledModule PowerShellGet\\n    if (!$psget)\\n    {\\n        Write-Warning @\\\"\\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\\n\\\"@\\n        throw \\\"PowerShellGet is not available\\\"\\n    }\\n\\n    if ($psget.Version -lt [Version]''1.6'') {\\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\\n        Write-Debug \\\"Installing NuGet package provider\\\"\\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\\n\\n        #Use the currently-installed version of PowerShellGet\\n        Import-PackageProvider PowerShellGet \\n        \\n        #Download the version of PowerShellGet that we actually need\\n        Write-Debug \\\"Installing PowershellGet\\\"\\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\\n    }\\n\\n    Write-Debug \\\"Importing PowershellGet\\\"\\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\\n    #Make sure we''re actually using the package provider from the imported version of PowerShellGet\\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\\n}\\n\\nfunction InstallLocalModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$moduleName,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n    try {\\n        InstallPowerShellGet\\n\\n        Write-Debug \\\"Install $moduleName $requiredVersion\\\"\\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\\n    }\\n    catch {\\n        Write-Warning \\\"Could not install $moduleName $requiredVersion from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetHighestInstalledModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName,\\n\\n        [Parameter(Mandatory = $false)]\\n        [Version]$minimumVersion,\\n        [Parameter(Mandatory = $false)]\\n        [Version]$maximumVersion\\n    )\\n\\n    return Get-Module $moduleName -ListAvailable | \\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \\n           Sort -Property Version -Descending |\\n           Select -First 1\\n}\\n\\nfunction GetHighestInstallableModule {\\n    [CmdletBinding()]\\n    Param(\\n        [Parameter(Mandatory = $true, Position = 0)]\\n        [string] $moduleName\\n    )\\n\\n    try {\\n        InstallPowerShellGet\\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \\n    }\\n    catch {\\n        Write-Warning \\\"Could not find any suitable versions of $moduleName from any registered PSRepository\\\"\\n    }\\n}\\n\\nfunction GetInstalledSqlChangeAutomationVersion {\\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\\n\\n    if ($scaModule -ne $null) {\\n        return $scaModule.Version\\n    }\\n\\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\\n\\n    if ($dlmaModule -ne $null) {\\n        return $dlmaModule.Version\\n    }\\n\\n    return $null\\n}\\n# Version date: 10th July 2018\\n$ErrorActionPreference = ''Stop''\\n$VerbosePreference = ''Continue''\\n\\n# Set process level FUR environment\\n$env:REDGATE_FUR_ENVIRONMENT = \\\"Octopus Step Templates\\\"\\n\\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\\n\\n# Check if SQL Change Automation is installed.\\t\\n$powershellModule = Get-Module -Name SqlChangeAutomation\\t\\nif ($powershellModule -eq $null) { \\t\\n    throw \\\"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\\\"\\t\\n}\\n\\n$currentVersion = $powershellModule.Version\\t\\n$minimumRequiredVersion = [version] ''3.0.3''\\t\\nif ($currentVersion -lt $minimumRequiredVersion) { \\t\\n    throw \\\"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\\\"\\t\\n}\\n# Check the parameters.\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \\\"You must enter a value for ''Target database name''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \\\"You must enter a value for ''Target SQL Server instance''.\\\" } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \\\"You must enter a value for ''Database package step''.\\\" }\\nif ([string]::IsNullOrWhiteSpace($DLMAutomationFilterPath)) { $DLMAutomationFilterPath = $null } \\nif ([string]::IsNullOrWhiteSpace($DLMAutomationCompareOptions)) { $DLMAutomationCompareOptions = $null } \\n\\n# Get the NuGet package installation directory path.\\n$packagePath = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Output.Package.InstallationDirectoryPath\\\"]\\nif($packagePath -eq $null) {\\n    throw \\\"The ''Database package download step'' is not a ''Deploy a NuGet package'' step: ''$DLMAutomationNuGetDbPackageDownloadStepName''\\\"\\n}\\n\\n# Constructing the unique export path.\\n$projectId = $OctopusParameters[\\\"Octopus.Project.Id\\\"]\\n$releaseNumber = $OctopusParameters[\\\"Octopus.Release.Number\\\"]\\n$nugetPackageId = $OctopusParameters[\\\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\\\"]\\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\\n\\n# Make sure the directory we''re about to create doesn''t already exist, and delete any files if requested.\\nif ((Test-Path $exportPath) -AND ((Get-ChildItem $exportPath | Measure-Object).Count -ne 0)) {\\n    if ($DLMAutomationDeleteExistingFiles -eq ''True'') {\\n        Write-Host \\\"Deleting all files in $exportPath\\\"\\n        rmdir $exportPath -Recurse -Force\\n    } else {\\n        throw \\\"The export path is not empty: $exportPath.  Select the ''Delete files in export folder'' option to overwrite the existing folder contents.\\\"\\n    }\\n}\\n\\n# Determine whether or not to include identical objects in the report.\\n$DLMAutomationIncludeIdenticalsInReport = $DLMAutomationIncludeIdenticalsInReport -eq \\\"True\\\"\\n\\n$targetDB = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer -Database $DLMAutomationDatabaseName -Username $DLMAutomationDatabaseUsername -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\\n$ignoreStaticData = $DLMAutomationIgnoreStaticData -eq \\\"True\\\"\\n\\n$importedBuildArtifact = Import-DatabaseBuildArtifact -Path $packagePath\\n\\n# Only allow sqlcmd variables that don''t have special characters like spaces, colon or dashes\\n$regex = ''^[a-zA-Z_][a-zA-Z0-9_]+$''\\n$sqlCmdVariables = @{}\\n$OctopusParameters.Keys | Where { $_ -match $regex } | ForEach {\\n\\t$sqlCmdVariables[$_] = $OctopusParameters[$_]\\n}\\n\\n# Create the deployment resources from the database to the NuGet package\\n$release = New-DatabaseReleaseArtifact -Target $targetDB `\\n                                       -Source $importedBuildArtifact `\\n                                       -TransactionIsolationLevel $DLMAutomationTransactionIsolationLevel `\\n                                       -IgnoreStaticData:$ignoreStaticData `\\n                                       -FilterPath $DLMAutomationFilterPath `\\n                                       -SQLCompareOptions $DLMAutomationCompareOptions `\\n                                       -IncludeIdenticalsInReport:$DLMAutomationIncludeIdenticalsInReport `\\n                                       -SqlCmdVariables $sqlCmdVariables\\n\\n# Export the deployment resources to disk\\n$release | Export-DatabaseReleaseArtifact -Path $exportPath\\n        \\n# Import the changes summary, deployment warnings, and update script as Octopus artifacts, so you can review them.\\nfunction UploadIfExists() {\\n    Param(\\n        [Parameter(Mandatory = $true)]\\n        [string]$artifactPath\\n    ) \\n    if (Test-Path $artifactPath) {\\n        New-OctopusArtifact $artifactPath\\n    }\\n}\\n    \\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Changes.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Drift.html\\\")\\nUploadIfExists(\\\"$exportPath\\\\Reports\\\\Warnings.xml\\\")\\nUploadIfExists(\\\"$exportPath\\\\Update.sql\\\")\\nUploadIfExists(\\\"$exportPath\\\\TargetedDeploymentScript.sql\\\")\\n\",\r&para;<br>            \"Octopus.Action.Template.Id\": \"ActionTemplates-1\",\r&para;<br>            \"Octopus.Action.Template.Version\": \"13\",\r&para;<br>            \"DLMAutomationDeleteExistingFiles\": \"True\",\r&para;<br>            \"DLMAutomationIncludeIdenticalsInReport\": \"False\",\r&para;<br>            \"Octopus.Action.RunOnServer\": \"true\",\r&para;<br>            \"DLMAutomationNuGetDbPackageDownloadStepName\": \"Octopus\",\r&para;<br>            \"DLMAutomationDatabaseServer\": \"W2k16-1\",\r&para;<br>            \"DLMAutomationDatabaseName\": \"Octopus_target\",\r&para;<br>            \"DLMAutomationDatabaseUsername\": \"sa\",\r&para;<br>            \"DLMAutomationDeploymentResourcesPath\": \"C:\\\\Users\\\\Sergio\\\\Desktop\\\\Export\"</span><ins style=\"background:#e6ffe6;\">,\r&para;<br>            \"DLMAutomationTransactionIsolationLevel\": \"Serializable\"</ins><span>\r&para;<br>          }\r&para;<br>        }\r&para;<br>      ],\r&para;<br>      \"Properties\": {\r&para;<br>        \"Octopus.Action.TargetRoles\": \"Test\"\r&para;<br>      }\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"RelatedDocumentIds\": [\r&para;<br>    \"ActionTemplates-1\"\r&para;<br>  ]\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 40)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-88', N'|Projects-1|Releases-22| ', N'Projects-1', NULL, N'Created', N'Users-1', N'Administrator', '2018-08-03 12:39:09.0856567 +00:00', N'SCA release 0.0.6 was created', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":0,"Length":3},{"ReferencedDocumentId":"Releases-22","StartIndex":12,"Length":5}],"Comments":null,"Details":"<span>{\r&para;<br>  \"Id\": \"Releases-22\",\r&para;<br>  \"Version\": \"0.0.6\",\r&para;<br>  \"ReleaseNotes\": null,\r&para;<br>  \"Assembled\": \"2018-08-03T12:39:09.0626082+00:00\",\r&para;<br>  \"ReleaseDefects\": [],\r&para;<br>  \"ProjectId\": \"Projects-1\",\r&para;<br>  \"ProjectVariableSetSnapshotId\": \"variableset-Projects-1-s-0-79YGW\",\r&para;<br>  \"ProjectDeploymentProcessSnapshotId\": \"deploymentprocess-Projects-1-s-7-NEC2H\",\r&para;<br>  \"LibraryVariableSetSnapshots\": [],\r&para;<br>  \"SelectedPackages\": [\r&para;<br>    {\r&para;<br>      \"ActionName\": \"Octopus\",\r&para;<br>      \"Version\": \"1.0.0\"\r&para;<br>    }\r&para;<br>  ],\r&para;<br>  \"ChannelId\": \"Channels-1\"\r&para;<br>}</span>","IdentityEstablishedWith":"Session cookie"}', NULL, 41)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-89', N'|Deployments-22|Projects-1|Releases-22|Environments-1|ServerTasks-228|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentQueued', N'Users-1', N'Administrator', '2018-08-03 12:39:13.9138982 +00:00', N'Deployed SCA release 0.0.6 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Projects-1","StartIndex":9,"Length":3},{"ReferencedDocumentId":"Releases-22","StartIndex":21,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":30,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Session cookie"}', NULL, 42)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-90', N'|Deployments-22|Projects-1|Releases-22|Environments-1|ServerTasks-228|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentStarted', N'users-system', N'system', '2018-08-03 12:39:13.9617217 +00:00', N'Deploy to Test started  for SCA release 0.0.6 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-22","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":28,"Length":3},{"ReferencedDocumentId":"Releases-22","StartIndex":40,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":49,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 43)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-91', N'|Deployments-22|Projects-1|Releases-22|Environments-1|ServerTasks-228|Channels-1|ProjectGroups-1| ', N'Projects-1', N'Environments-1', N'DeploymentSucceeded', N'users-system', N'system', '2018-08-03 12:39:37.3626624 +00:00', N'Deploy to Test succeeded  for SCA release 0.0.6 to Test', N'{"MessageReferences":[{"ReferencedDocumentId":"Deployments-22","StartIndex":0,"Length":14},{"ReferencedDocumentId":"Projects-1","StartIndex":30,"Length":3},{"ReferencedDocumentId":"Releases-22","StartIndex":42,"Length":5},{"ReferencedDocumentId":"Environments-1","StartIndex":51,"Length":4}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 44)
INSERT INTO [dbo].[Event] ([Id], [RelatedDocumentIds], [ProjectId], [EnvironmentId], [Category], [UserId], [Username], [Occurred], [Message], [JSON], [TenantId], [AutoId]) VALUES (N'Events-92', N'|Machines-1|Environments-1| ', NULL, N'Environments-1', N'MachineHealthy', N'users-system', N'system', '2018-08-03 13:30:33.9450770 +00:00', N'DeploymentTarget W2k16-1 became healthy', N'{"MessageReferences":[{"ReferencedDocumentId":"Machines-1","StartIndex":17,"Length":7}],"Comments":null,"Details":null,"IdentityEstablishedWith":"Unknown"}', NULL, 45)
SET IDENTITY_INSERT [dbo].[Event] OFF
